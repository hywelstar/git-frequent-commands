diff --git a/InstallGit.md b/InstallGit.md
deleted file mode 100644
index c9d1f1f..0000000
--- a/InstallGit.md
+++ /dev/null
@@ -1,24 +0,0 @@
-# Git 安装指南
-
-## Ubuntu 系统上安装 Git
-
-### 方法一：使用 apt 命令安装（推荐）
-
-1. **更新包列表**：
-
-   ```bash
-      sudo apt update
-   ```
-
-2. **安装**
-
-    ```bash
-    sudo apt install git
-    ```
-
-3. **验证安装**:
-
-    ```bash 
-    git --version
-    ```
-
diff --git a/git-branch-operations.md b/git-branch-operations.md
index 6caac23..4cb4c96 100644
--- a/git-branch-operations.md
+++ b/git-branch-operations.md
@@ -1,109 +1,109 @@
-# git-branch-operations.md
-
-## Git 分支操作指南
-
-在 Git 中，分支操作涉及到创建、切换、查看、合并和删除等几个主要的操作。下面是这些操作的具体步骤和命令：
-
-### 1. 创建分支
-
-创建一个新的分支，通常基于当前所在的分支（如 `master` 或 `main`）：
-
-```bash
-git branch <branch-name>
-```
-
-例如，创建名为 `feature/new-feature` 的分支：
-
-```bash
-git branch feature/new-feature
-```
-
-### 2. 切换分支
-
-切换到已存在的分支：
-
-```bash
-git checkout <branch-name>
-```
-
-或者，使用 `git switch` 命令（推荐使用 `git switch` 替代 `git checkout`）：
-
-```bash
-git switch <branch-name>
-```
-
-例如，切换到 `feature/new-feature` 分支：
-
-```bash
-git switch feature/new-feature
-```
-
-### 3. 查看分支
-
-查看当前仓库中所有的分支及其状态：
-
-```bash
-git branch
-```
-
-添加 `-a` 选项可以查看所有本地和远程分支：
-
-```bash
-git branch -a
-```
-
-### 4. 合并分支
-
-将指定分支的更改合并到当前分支：
-
-首先切换到要接受更改的目标分支，例如 `main` 分支：
-
-```bash
-git switch main
-```
-
-然后执行合并操作：
-
-```bash
-git merge <branch-to-merge>
-```
-
-### 5. 删除分支
-
-删除指定的本地分支：
-
-```bash
-git branch -d <branch-name>
-```
-
-如果要强制删除（即使分支上的更改没有合并到其他分支），使用 `-D` 选项：
-
-```bash
-git branch -D <branch-name>
-```
-
-### 6. 查看分支历史
-
-查看分支的提交历史和分支图：
-
-```bash
-git log --graph --oneline --all
-```
-
-这会显示所有分支的提交历史，并以图形方式展示分支之间的关系。
-
-### 7. 推送分支到远程仓库
-
-如果需要将新创建的分支推送到远程仓库：
-
-```bash
-git push origin <branch-name>
-```
-
-例如，将 `feature/new-feature` 分支推送到远程仓库：
-
-```bash
-git push origin feature/new-feature
-```
-
+# git-branch-operations.md
+
+## Git 分支操作指南
+
+在 Git 中，分支操作涉及到创建、切换、查看、合并和删除等几个主要的操作。下面是这些操作的具体步骤和命令：
+
+### 1. 创建分支
+
+创建一个新的分支，通常基于当前所在的分支（如 `master` 或 `main`）：
+
+```bash
+git branch <branch-name>
+```
+
+例如，创建名为 `feature/new-feature` 的分支：
+
+```bash
+git branch feature/new-feature
+```
+
+### 2. 切换分支
+
+切换到已存在的分支：
+
+```bash
+git checkout <branch-name>
+```
+
+或者，使用 `git switch` 命令（推荐使用 `git switch` 替代 `git checkout`）：
+
+```bash
+git switch <branch-name>
+```
+
+例如，切换到 `feature/new-feature` 分支：
+
+```bash
+git switch feature/new-feature
+```
+
+### 3. 查看分支
+
+查看当前仓库中所有的分支及其状态：
+
+```bash
+git branch
+```
+
+添加 `-a` 选项可以查看所有本地和远程分支：
+
+```bash
+git branch -a
+```
+
+### 4. 合并分支
+
+将指定分支的更改合并到当前分支：
+
+首先切换到要接受更改的目标分支，例如 `main` 分支：
+
+```bash
+git switch main
+```
+
+然后执行合并操作：
+
+```bash
+git merge <branch-to-merge>
+```
+
+### 5. 删除分支
+
+删除指定的本地分支：
+
+```bash
+git branch -d <branch-name>
+```
+
+如果要强制删除（即使分支上的更改没有合并到其他分支），使用 `-D` 选项：
+
+```bash
+git branch -D <branch-name>
+```
+
+### 6. 查看分支历史
+
+查看分支的提交历史和分支图：
+
+```bash
+git log --graph --oneline --all
+```
+
+这会显示所有分支的提交历史，并以图形方式展示分支之间的关系。
+
+### 7. 推送分支到远程仓库
+
+如果需要将新创建的分支推送到远程仓库：
+
+```bash
+git push origin <branch-name>
+```
+
+例如，将 `feature/new-feature` 分支推送到远程仓库：
+
+```bash
+git push origin feature/new-feature
+```
+
 这些基本的分支操作命令能够帮助你有效地管理和使用 Git 中的分支，从而更好地组织和协调项目的开发流程。
\ No newline at end of file
diff --git a/git-clone-with-submodules.md b/git-clone-with-submodules.md
index 04c25c9..497b2a0 100644
--- a/git-clone-with-submodules.md
+++ b/git-clone-with-submodules.md
@@ -1,100 +1,100 @@
-# git-clone-with-submodules
-
-## Git clone 子模块指南
-
-在克隆一个包含子模块的 Git 仓库时，可以使用以下步骤确保所有子模块都被正确初始化和更新。
-
-### 步骤
-
-### 1. 使用 `--recurse-submodules` 选项克隆仓库
-
-使用 `--recurse-submodules` 选项可以在克隆仓库时自动初始化和更新所有子模块。
-
-```bash
-git clone --recurse-submodules <repository_url>
-```
-
-例如：
-
-```bash
-git clone --recurse-submodules https://github.com/zalebool/git-frequent-commands.git
-```
-
-### 2. 如果已经克隆了仓库，但没有初始化子模块
-
-如果你已经克隆了仓库，但还没有初始化子模块，可以使用以下命令手动初始化和更新子模块：
-
-```bash
-cd <repository_name>
-git submodule update --init --recursive
-```
-
-例如：
-
-```bash
-cd git-frequent-commands
-git submodule update --init --recursive
-```
-
-### 3. 确认子模块已初始化
-
-使用以下命令确认子模块已被初始化和更新：
-
-```bash
-git submodule
-```
-
-### 4. 更新子模块
-
-如果子模块有更新，你可以使用以下命令来更新它们：
-
-```bash
-git submodule update --remote --merge
-```
-
-## 其他常见子模块操作
-
-### 查看子模块状态
-
-```bash
-git submodule status
-```
-
-### 添加新子模块
-
-```bash
-git submodule add <repository_url> <path>
-git commit -m "Add new submodule <submodule_name>"
-```
-
-### 移除子模块
-
-如果你需要移除一个子模块，可以使用以下步骤：
-
-```bash
-git submodule deinit -f <path_to_submodule>
-git rm -f <path_to_submodule>
-rm -rf .git/modules/<path_to_submodule>
-git commit -m "Remove submodule <submodule_name>"
-```
-
-## 示例
-
-```bash
-# 克隆仓库并初始化子模块
-git clone --recurse-submodules https://github.com/zalebool/git-frequent-commands.git
-
-# 切换到仓库目录
-cd git-frequent-commands
-
-# 确认子模块已初始化
-git submodule
-
-# 更新子模块（如果有更新）
-git submodule update --remote --merge
-```
-
-通过这些步骤，你可以确保克隆的仓库中的所有子模块都被正确初始化和更新，从而完整地获取项目所依赖的所有代码。
-```
-
+# git-clone-with-submodules
+
+## Git clone 子模块指南
+
+在克隆一个包含子模块的 Git 仓库时，可以使用以下步骤确保所有子模块都被正确初始化和更新。
+
+### 步骤
+
+### 1. 使用 `--recurse-submodules` 选项克隆仓库
+
+使用 `--recurse-submodules` 选项可以在克隆仓库时自动初始化和更新所有子模块。
+
+```bash
+git clone --recurse-submodules <repository_url>
+```
+
+例如：
+
+```bash
+git clone --recurse-submodules https://github.com/zalebool/git-frequent-commands.git
+```
+
+### 2. 如果已经克隆了仓库，但没有初始化子模块
+
+如果你已经克隆了仓库，但还没有初始化子模块，可以使用以下命令手动初始化和更新子模块：
+
+```bash
+cd <repository_name>
+git submodule update --init --recursive
+```
+
+例如：
+
+```bash
+cd git-frequent-commands
+git submodule update --init --recursive
+```
+
+### 3. 确认子模块已初始化
+
+使用以下命令确认子模块已被初始化和更新：
+
+```bash
+git submodule
+```
+
+### 4. 更新子模块
+
+如果子模块有更新，你可以使用以下命令来更新它们：
+
+```bash
+git submodule update --remote --merge
+```
+
+## 其他常见子模块操作
+
+### 查看子模块状态
+
+```bash
+git submodule status
+```
+
+### 添加新子模块
+
+```bash
+git submodule add <repository_url> <path>
+git commit -m "Add new submodule <submodule_name>"
+```
+
+### 移除子模块
+
+如果你需要移除一个子模块，可以使用以下步骤：
+
+```bash
+git submodule deinit -f <path_to_submodule>
+git rm -f <path_to_submodule>
+rm -rf .git/modules/<path_to_submodule>
+git commit -m "Remove submodule <submodule_name>"
+```
+
+## 示例
+
+```bash
+# 克隆仓库并初始化子模块
+git clone --recurse-submodules https://github.com/zalebool/git-frequent-commands.git
+
+# 切换到仓库目录
+cd git-frequent-commands
+
+# 确认子模块已初始化
+git submodule
+
+# 更新子模块（如果有更新）
+git submodule update --remote --merge
+```
+
+通过这些步骤，你可以确保克隆的仓库中的所有子模块都被正确初始化和更新，从而完整地获取项目所依赖的所有代码。
+```
+
 你可以将以上内容保存为 `clone-with-submodules.md` 文件，并将其添加到你的 Git 仓库中。
\ No newline at end of file
diff --git a/git-push-steps.md b/git-push-steps.md
index c04862a..27587e5 100644
--- a/git-push-steps.md
+++ b/git-push-steps.md
@@ -1,47 +1,47 @@
-# git-push-setps
-
-## Git push 推送指南
-
-提交代码到版本控制系统（如 Git）通常涉及以下基本步骤：
-
-### 提交代码的步骤
-
-1. **工作目录状态检查**：
-   - 在进行任何更改之前，建议先检查工作目录的状态，确认当前的修改状态。
-
-   ```bash
-   git status
-   ```
-
-2. **添加修改到暂存区**：
-   - 使用 `git add` 命令将修改或新增的文件添加到 Git 的暂存区（Staging Area）。
-
-   ```bash
-   git add <file1> <file2> ...    # 添加指定文件
-   git add .                      # 添加所有修改的文件
-   ```
-
-3. **确认更改**：
-   - 使用 `git status` 再次确认修改已经添加到了暂存区。
-
-   ```bash
-   git status
-   ```
-
-4. **提交到本地仓库**：
-   - 使用 `git commit` 命令将暂存区中的文件提交到本地仓库，并附带提交信息。
-
-   ```bash
-   git commit -m "Your commit message"
-   ```
-
-   - 如果省略 `-m` 参数，Git 将会打开默认文本编辑器（如 Vim 或 Nano），以便你输入详细的提交信息。
-
-5. **推送到远程仓库（可选）**：
-   - 如果是首次推送或者需要同步更新到远程仓库，可以使用 `git push` 命令将本地提交推送到远程仓库。
-
-   ```bash
-   git push origin <branch>
-   ```
-
+# git-push-setps
+
+## Git push 推送指南
+
+提交代码到版本控制系统（如 Git）通常涉及以下基本步骤：
+
+### 提交代码的步骤
+
+1. **工作目录状态检查**：
+   - 在进行任何更改之前，建议先检查工作目录的状态，确认当前的修改状态。
+
+   ```bash
+   git status
+   ```
+
+2. **添加修改到暂存区**：
+   - 使用 `git add` 命令将修改或新增的文件添加到 Git 的暂存区（Staging Area）。
+
+   ```bash
+   git add <file1> <file2> ...    # 添加指定文件
+   git add .                      # 添加所有修改的文件
+   ```
+
+3. **确认更改**：
+   - 使用 `git status` 再次确认修改已经添加到了暂存区。
+
+   ```bash
+   git status
+   ```
+
+4. **提交到本地仓库**：
+   - 使用 `git commit` 命令将暂存区中的文件提交到本地仓库，并附带提交信息。
+
+   ```bash
+   git commit -m "Your commit message"
+   ```
+
+   - 如果省略 `-m` 参数，Git 将会打开默认文本编辑器（如 Vim 或 Nano），以便你输入详细的提交信息。
+
+5. **推送到远程仓库（可选）**：
+   - 如果是首次推送或者需要同步更新到远程仓库，可以使用 `git push` 命令将本地提交推送到远程仓库。
+
+   ```bash
+   git push origin <branch>
+   ```
+
    - `<branch>` 是指要推送的分支名称，通常是 `main` 或 `master`。
\ No newline at end of file
diff --git a/git-tag-usage.md b/git-tag-usage.md
index 05f60b7..49f2d40 100644
--- a/git-tag-usage.md
+++ b/git-tag-usage.md
@@ -1,142 +1,142 @@
-# git-tag-usage
-
-## Git 标签使用指南
-
-在 Git 中，标签用于标记特定的提交点，通常用于标记版本发布等重要节点。使用标签可以方便地切换到特定版本，追踪和管理软件版本。
-
-## 标签的主要作用
-
-1. **版本标记**：标签通常用于标记特定的版本发布。这样可以明确每个版本的代码状态，方便以后查找和使用。
-2. **快速切换版本**：使用标签可以快速切换到特定的版本，查看该版本的代码或进行回滚操作。
-3. **发布管理**：在发布新版本时，可以创建一个标签，这样团队成员和用户可以明确地知道哪个版本的代码对应哪个发布版本。
-
-## 创建标签
-
-### 1. 创建轻量标签
-
-轻量标签只是某个提交的简单引用：
-
-```bash
-git tag <tagname>
-```
-
-例如：
-
-```bash
-git tag v1.0
-```
-
-### 2. 创建附注标签
-
-附注标签包含创建者的信息、日期、标签描述和其他元数据：
-
-```bash
-git tag -a <tagname> -m "Tag message"
-```
-
-例如：
-
-```bash
-git tag -a v1.0 -m "Initial release"
-```
-
-## 推送标签到远程仓库
-
-默认情况下，标签不会被推送到远程仓库。你需要显式推送标签：
-
-### 1. 推送单个标签
-
-```bash
-git push origin <tagname>
-```
-
-例如：
-
-```bash
-git push origin v1.0
-```
-
-### 2. 推送所有标签
-
-```bash
-git push origin --tags
-```
-
-## 查看标签
-
-### 查看所有标签
-
-```bash
-git tag
-```
-
-### 查看标签的详细信息
-
-```bash
-git show <tagname>
-```
-
-例如：
-
-```bash
-git show v1.0
-```
-
-## 删除标签
-
-### 删除本地标签
-
-```bash
-git tag -d <tagname>
-```
-
-例如：
-
-```bash
-git tag -d v1.0
-```
-
-### 删除远程标签
-
-首先删除本地标签，然后推送删除操作到远程仓库：
-
-```bash
-git push origin :refs/tags/<tagname>
-```
-
-例如：
-
-```bash
-git push origin :refs/tags/v1.0
-```
-
-## 切换到标签
-
-使用 `git checkout` 命令可以切换到某个标签所对应的提交：
-
-```bash
-git checkout <tagname>
-```
-
-例如：
-
-```bash
-git checkout v1.0
-```
-
-注意：这会使你进入一个“分离头指针”状态，即你不会在任何分支上工作，而是直接在那个提交上。
-
-## 在标签基础上创建分支
-
-如果你想在标签对应的代码基础上进行开发，可以创建一个新分支：
-
-```bash
-git checkout -b <new-branch-name> <tagname>
-```
-
-例如：
-
-```bash
-git checkout -b fix-issue-v1.0 v1.0
-```
-
+# git-tag-usage
+
+## Git 标签使用指南
+
+在 Git 中，标签用于标记特定的提交点，通常用于标记版本发布等重要节点。使用标签可以方便地切换到特定版本，追踪和管理软件版本。
+
+## 标签的主要作用
+
+1. **版本标记**：标签通常用于标记特定的版本发布。这样可以明确每个版本的代码状态，方便以后查找和使用。
+2. **快速切换版本**：使用标签可以快速切换到特定的版本，查看该版本的代码或进行回滚操作。
+3. **发布管理**：在发布新版本时，可以创建一个标签，这样团队成员和用户可以明确地知道哪个版本的代码对应哪个发布版本。
+
+## 创建标签
+
+### 1. 创建轻量标签
+
+轻量标签只是某个提交的简单引用：
+
+```bash
+git tag <tagname>
+```
+
+例如：
+
+```bash
+git tag v1.0
+```
+
+### 2. 创建附注标签
+
+附注标签包含创建者的信息、日期、标签描述和其他元数据：
+
+```bash
+git tag -a <tagname> -m "Tag message"
+```
+
+例如：
+
+```bash
+git tag -a v1.0 -m "Initial release"
+```
+
+## 推送标签到远程仓库
+
+默认情况下，标签不会被推送到远程仓库。你需要显式推送标签：
+
+### 1. 推送单个标签
+
+```bash
+git push origin <tagname>
+```
+
+例如：
+
+```bash
+git push origin v1.0
+```
+
+### 2. 推送所有标签
+
+```bash
+git push origin --tags
+```
+
+## 查看标签
+
+### 查看所有标签
+
+```bash
+git tag
+```
+
+### 查看标签的详细信息
+
+```bash
+git show <tagname>
+```
+
+例如：
+
+```bash
+git show v1.0
+```
+
+## 删除标签
+
+### 删除本地标签
+
+```bash
+git tag -d <tagname>
+```
+
+例如：
+
+```bash
+git tag -d v1.0
+```
+
+### 删除远程标签
+
+首先删除本地标签，然后推送删除操作到远程仓库：
+
+```bash
+git push origin :refs/tags/<tagname>
+```
+
+例如：
+
+```bash
+git push origin :refs/tags/v1.0
+```
+
+## 切换到标签
+
+使用 `git checkout` 命令可以切换到某个标签所对应的提交：
+
+```bash
+git checkout <tagname>
+```
+
+例如：
+
+```bash
+git checkout v1.0
+```
+
+注意：这会使你进入一个“分离头指针”状态，即你不会在任何分支上工作，而是直接在那个提交上。
+
+## 在标签基础上创建分支
+
+如果你想在标签对应的代码基础上进行开发，可以创建一个新分支：
+
+```bash
+git checkout -b <new-branch-name> <tagname>
+```
+
+例如：
+
+```bash
+git checkout -b fix-issue-v1.0 v1.0
+```
+
